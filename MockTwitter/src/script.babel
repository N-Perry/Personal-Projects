import { useState } from "https://cdn.skypack.dev/react@17.0.1"; // i want practice using hooks! :)

const fakeUserDB = { // user info can be accessed via username (this probably isn't best practice lol)
  'Andy': {
    username: 'JRodEnthusiast97',
    posts: [
      {
        postID: 1,
        postText: "Man oh man i just really love the Houston Astros!"
      }, {
        postID: 2,
        postText: "Does anyone else think that Nick is just the greatest man alive?"
      }, {
        postID: 3,
        postText: "My cat Jo is just a snugglybugglyumpkins :3 #meow"
      }
    ]
  },
  'Nick': {
    username: 'slickNicky98',
    posts: [
      {
        postID: 1,
        postText: "Get buckets or die trying #differentanimal #samebeast"
      }, {
        postID: 2,
        postText: "Should i do standup? honest replies only"
      }, {
        postID: 3,
        postText: "Never forget the Alamo."
      }
    ]
  }
};

// for now, displays all user posts from fakeDB
class HomePage extends React.Component {
  constructor(props) {
    super(props);
  }
  
  render() {
    let users = [];
    for (const user in fakeUserDB) {
      users.push(fakeUserDB[user]);
    }

    users = users.map((user) => {
      return (
        <PostsList user={user}/>
      );
    });
    
    return (
      <div id="home-page">
        {users}
      </div>
    );
  }
}

// outputs list of Post components
const PostsList = (props) => {
  const posts = props.user.posts.map(post => {
    return <Post post={post} />
  });
  
  return (
    <>
      <strong>@{props.user.username}</strong>: 
      <div className='posts-list'>{posts}</div>    
    </>
  );
}

// displays user post, ideally alongside username, profile pic, etc. in the future
const Post = (props) => {
  const [likesCount, setLikesCount] = React.useState(0);
  const [commenting, setCommenting] = React.useState(false);
  const [commentList, setCommentList] = React.useState([]);
  
  const handleLike = () => {
    setLikesCount(likesCount + 1);
  }
  
  const handleComment = () => {
    if (commenting) {
      setCommenting(false);
    } else {
      setCommenting(true);
    }
  }
  
  const handleSubmitComment = (comment) => {
    if (comment) {
      setCommentList([...commentList, comment]);
      setCommenting(false);
    }
  };
  
  const handleRetweet = () => {
    if(commenting) {
      setCommenting(false);
    }
    alert("imagine actually implementing retweet functionality LOL couldn't be me");
  }
  
  const comments = commentList.map(comment => {
    return (
      <div className="comment">{comment}</div>
    );
  })
  
  return (
    <div className="post">
      <div className='profile-pic'>PP</div>
      <h4 className='post-text'>{props.post.postText}</h4>
      {comments}
      <hr />
      {commenting && <CommentForm handleSubmit={handleSubmitComment} />} 
      <div className='post-footer'>
        <button className="btn" name='comment' onClick={handleComment}><i className="fa-solid fa-comment"></i></button>
        <button className="btn" name='retweet' onClick={handleRetweet}><i className="fa-solid fa-retweet"></i></button>
        <span><button className="btn" name="like" onClick={handleLike}><i className='fa-solid fa-heart'></i></button>{likesCount}</span>
      </div>
    </div>
  );
}

// component for textbox & submit button that appears when 'commenting' state is true
const CommentForm = (props) => {
  const [comment, setComment] = React.useState('')
  
  const handleChange = (e) => {
    setComment(e.target.value);
  }
  
  return (
    <div className='commenting'>
      <textarea name="commentBox" onChange={handleChange} value={comment} rows="4" cols="50">
      </textarea>
      <button className='submit-comment btn btn-primary' onClick={() => props.handleSubmit(comment)}>submit</button>
    </div>
  );
}


ReactDOM.render(<HomePage />, document.getElementById('app'));